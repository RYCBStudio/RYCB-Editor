<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        MCMEJwAAAAAAACgHAgEBAgcpAAAAAPAPAADDwQAAn+EAALABAACDgQAAn9kAAL+dAACAAQAAj/EAAJ/5
        AACAAQAAn/kAAJ/5AACf+QAAw8MAAPAPAAAoAAAAGAAAADAAAAABACAAAAAAAGAJAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVVVQ9TU1MuVVVVYlZWVqZUVFTWVVVV9VVVVf9VVVX/VVVV/1NU
        YP9ITZX6Rkye31BSaadTU1ViU1NTLlVVVQ9/f/8CNUPxJjZC9H80QfVOAAAAAAAAAABVVVUGVlZWLFRU
        VHlUVFTOVVVV7lVVVelUVFTZVFRUylRUVMVUVFTFVFRUxU9Sb8c+R8XdOkTc+EdMmfdSU2HvVFRVzVVV
        V3hHS6FHNkLzljVD9dU0QvWCAAAAAFVVVQZTU1NDVFRUt1RUVPFUVFTdVVVVqlRUVHlUVFRUUVFRNVdX
        VylXV1cpV1dXKU9Uay0/R8VZN0PtvjlE3/RGTJzuU1Rg5lBSavFASLrhN0Pv4zZC85UzP/IoAAAAAFdX
        VylVVVWzVVVV8lRUVKtUVFRUUVFRHFVVVQN/f38CVVVVA1VVVQNVVVUDVVVVA1VVVQNISLYHOETuPzZB
        87Y3Q+rhP0i7zEFIvOs6RN7+QEe+3ERMp0MAAH8CAAAAAFNTU0lVVVXuVFRUsVNTUzRFRUULVVVVD1JS
        UiJWVlZEU1NTXFVVVWBVVVVgVVVVYFVVVWBTU1NcU1NeST9Hul01Q+3CNUL06jdC7+xBSLruUFJr71RU
        WEgAAAAAAAAAAFNTU09UVFT5VFRUf1NTUytVVVVlVFRUqVVVVc5VVVXaVFRU3lVVVd1VVVXdVVVV3VVV
        Vd1UVFTeVVVW2k9ScNM9RsvoNkPs/TZC7/BDSrDjUlJg+VRUVE4AAAAAAAAAAFNTU09UVFT5VFRUvlRU
        VMZVVVXpVFRU5FRUVNhVVVXIVFRUrlVVVaFVVVWhVVVVoVVVVaFVVVawT1Bt4ENKsvs5Rd37P0jB/j1G
        yv05Rdr7R0ua+UxPfFAAAP8BAAAAAFNTU09UVFT5VFRU+lVVVeNVVVW2VFRUc1RUVDlNTU0XW1tbDlVV
        VQxVVVUMVVVVDFVVdw8+SMoxOUTkpDdD7eQ8RtS4TlF0vExQfuU+R8X+OUXb+zpG33s8SPIVAAAAAFNT
        U09UVFT5VVVV2VRUVHJRUVEcZmZmBX9/fwIAAAAAAAAAAAAAAAAAAAAAAAAAADI99Bk2Q/WINkLz3TVD
        8pQ3ROolVVVdHlRUWnNMT4DaPkfH/jdD7ts0QvVrAAAAAFNTU09UVFT5VVVVjFRUVBJ/f38CVVVVBlFR
        URZVVVUzVFRUSFNTU0xTU1NMU1NTTE5Qf2I/SMWxPEXTqT9IujhfX38If39/Al1dXRNSUlmOTVB7/TxG
        z8ozQvVnAAAAAFNTU09UVFT5VVVVdFhYWBpTU1NSU1NTklRUVLdUVFTJVFRU01VVVdRVVVXUVVVV1FRU
        V9VRU2bgUVNl11RUVrlUVFSRVlZWUFFRURlUVFR2VFRY+UxOg2stPPARAAAAAFNTU09UVFT5VFRUsVVV
        VbNUVFTeVFRU6VRUVOdVVVXdVFRUw1VVVbZVVVW2VVVVtlVVVbZUVFTEVVVV3VRUVOdUVFToVFRU3lRU
        VLJVVVWzVFRU+VRUVE4AAAAAAAAAAFNTU09UVFT5VVVV9VVVVelVVVXLVFRUiFdXV0xUVFQnVFRUG1FR
        URlRUVEZUVFRGVFRURlUVFQbVFRUJ1ZWVk1VVVWJVVVVy1VVVelUVFT2VFRU+VRUVE4AAAAAAAAAAFNT
        U09UVFT5VVVV41VVVYZQUFApXFxcCz8/PwRVVVUDTk5ODUxMTBRMTEwUTExMFExMTBROTk4NVVVVAz8/
        PwRcXFwLTk5OKlRUVIdUVFTkVFRU+VRUVE4AAAAAAAAAAFNTU09UVFT5VVVVlU5OThpVVVUMVlZWMlRU
        VFhUVFRwVFRUhFVVVY9VVVWPVVVVj1VVVY9UVFSEVFRUb1RUVFhRUVEyVVVVDFhYWBpUVFSXVFRU+VRU
        VE4AAAAAAAAAAFNTU09UVFT5U1NTelRUVEVUVFSOVVVVwFVVVd9VVVXgVVVVx1VVVbZVVVWzVVVVs1VV
        VbZVVVXHVVVV4FVVVd9VVVW/VFRUjlRUVEVUVFR7VVVV+FRUVE4AAAAAAAAAAFNTU09UVFT5VFRUylRU
        VMRVVVXRVFRUlFRUVF1UVFRCVVVVM1dXVylSUlIoUlJSKFdXVylVVVUzVFRUQlRUVF5WVlaUVFRU0lRU
        VMRVVVXKVFRU+VRUVE4AAAAAAAAAAFNTU09UVFT5VFRU6FRUVJBWVlY7WFhYF1VVVQYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAFVVVQZYWFgXUlJSPlNTU5hVVVXpVFRU+VRUVE4AAAAAAAAAAFNT
        U09UVFT5VVVVqlRUVCpVVVUDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAVVVVA1FRUSxUVFSsVFRU+VRUVE4AAAAAAAAAAFRUVEhVVVXsVFRUtFNTUzQ/Pz8EAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPz8/BFFRUTVUVFS1VFRU7lRU
        VEgAAAAAAAAAAFJSUiJVVVWhVFRU7VRUVKlUVFROVFRUG39/fwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAH9/fwJRUVEcVlZWU1RUVKpVVVXyVFRUsldXVykAAAAAAAAAAH9/fwJRUVEvVFRUq1VV
        VfBUVFTXVVVVp1VVVXhWVlZTU1NTNFBQUClQUFApUFBQKVBQUClTU1M0VlZWU1VVVXhWVlapVVVV3FVV
        VfBUVFS4U1NTQ0hISAcAAAAAAAAAAAAAAAB/f38CV1dXKVVVVXpVVVXOVVVV7lVVVelUVFTYVFRUyVRU
        VMRUVFTEVFRUxFRUVMRUVFTJVFRU2FVVVelVVVXuVVVVzlZWVnlUVFQtSEhIBwAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAE9PTxBWVlYvVFRUY1VVVadVVVXXVVVV9VVVVf9VVVX/VVVV/1VVVf9UVFTvVVVV0VZW
        VqZUVFRjVlZWL09PTxAAAAAAAAAAAAAAAAAAAAAA8AAAAMAAAACAAAAAgAAAAIAAAQCAAAEAgAAAAIAA
        AACA+AAAgAAAAIAAAACAAAEAgAABAIAAAQCAAAEAgAABAIAAAQCA/wEAg//BAIP/wQCA/wEAgAABAMAA
        AwDwAA8AKAAAABQAAAAoAAAAAQAgAAAAAACQBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFtb
        Ww5WVlY+VFRUe1VVVcBVVVXpVFRU/VVVVf9VVVX/T1Fx/kNKrfFNT4DDVFRXe1ZWVj5bW1sOMz/yFDVD
        83I1QvdkAAAAAD8/PwRTU1MxVFRUkFVVVdpUVFToVFRUylRUVKZUVFSQU1NTj1NTU49JTouZOkTc1z5G
        xfhOUHX2VFRX21FTaZY6RdqTNULy0DRB9HQAAAAAVlZWL1RUVLdVVVXjVlZWplRUVFVUVFQnVVVVGFtb
        Ww5OTk4NTk5ODUZGjRI3ReZJN0Pvwj1GzuVLT4PZREqk9TpF3e87RtuRMz/yFAAAAAFUVFR7VVVV41RU
        VHtVVVUYZmZmClVVVRhVVVUwVFRUOVRUVDlUVFQ5VFRUOVFRZTU9RslbN0PwxTdD6uA4ROLsREul9FFR
        bIEAAAABAAAAAVRUVJNUVFTSVlZWOFRUVFVVVVWYVFRUvVRUVM5UVFTPVFRUz1RUVM9UVFTPVFRVzVFT
        ZcE+SMfbNkTt+zdD5uZNUH71VFRZkQAAAAEAAAABVFRUk1VVVelUVFS+VFRU51RUVNhVVVW+VFRUplVV
        VY9UVFSNVFRUjVVVVY9RU2W1RUqk8jtF2PpBSbj9PEbO+z9Hwv1KToqTAFWqAwAAAAFUVFSTVFRU/FRU
        VNhUVFSEV1dXQ1VVVRhISEgHZmZmBWZmZgVmZmYFP0rfGDdD7YE3Q+/VO0bbjlBRbYlLT4TbPUbL/ThD
        5MMzQvU2AAAAAVRUVJNVVVXjVFRUWlxcXAv///8BVFRUCVFRURZYWFgaWFhYGlhYWBo8R8hZOETqxjhE
        6YMzTOUUVVVVDFRUXFtMT4PkPUfP7TRD9YgAAAABVFRUk1RUVM1SUlIfUVFRLFRUVF1VVVWDVFRUolVV
        VaxVVVWsVVVVrFFTZbhLT4bLUFJoklRUVF1RUVEsT09PIFNTWc9LT4C3MULuLgAAAAFUVFSTVFRU31RU
        VJNVVVXLVVVV41VVVeNUVFTTVFRUvVRUVLtUVFS7VFRUvVRUVdNVVVXjVVVV41VVVctUVFSTVVVV4FRU
        VJEAAAABAAAAAVRUVJNUVFT8VFRU51RUVLpVVVV0VFRUOVJSUh9RUVEZVVVVGFVVVRhRUVEZUlJSH1RU
        VDlVVVV0VFRUu1RUVOdUVFT8VFRUkQAAAAEAAAABVFRUk1RUVO1UVFR/V1dXHVVVVQxPT08QVFRUG1FR
        US9VVVUwVVVVMFFRUS9UVFQbT09PEFVVVQxXV1cdU1NTgVRUVO1UVFSRAAAAAQAAAAFUVFSTVFRU0VZW
        Vi9SUlI7U1NTfVRUVLVVVVXAVVVVv1RUVL1UVFS9VVVVv1VVVcBUVFS1U1NTfVJSUjtVVVUwVFRU0lRU
        VJEAAAABAAAAAVRUVJNUVFTfVFRUk1VVVctVVVWzVFRUjVZWVnBUVFRYU1NTUlNTU1JUVFRYVVVVcVRU
        VI1VVVWzVFRUy1VVVZJVVVXgVFRUkQAAAAEAAAABVFRUk1RUVPdVVVW1VFRUVVdXVyBmZmYFAAAAAQAA
        AAAAAAAAAAAAAAAAAAAAAAABVVVVBldXVyBUVFRYVVVVuVRUVPdUVFSRAAAAAQAAAAFUVFSTVFRU4VNT
        U0w/Pz8EAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH9/fwRUVFROVFRU4VRU
        VJEAAAABAAAAAVVVVXdUVFThVVVVelRUVBVVVVUDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAA/Pz8EUVFRFlRUVHxUVFTkVVVVegAAAAAAAAAAV1dXI1RUVKVUVFThVFRUoFJSUlNUVFQnWFhYF1tb
        Ww5OTk4NTk5ODVtbWw5YWFgXVFRUJ1RUVFRUVFSmVFRU41RUVLdWVlYvAAAAAAAAAAAAAAACTk5OJ1RU
        VJFVVVXaVFRU51RUVMlUVFSlVFRUjlRUVI1UVFSNVFRUjlRUVKVUVFTJVFRU51VVVdpUVFSRWFhYMT8/
        PwQAAAAAAAAAAAAAAAAAAAAAVVVVD1RUVD9UVFR8VFRUwVVVVelUVFT9VVVV/lVVVf5UVFT8VFRU4lVV
        Vb9UVFR8VFRUP1tbWw4AAAAAAAAAAAAAAADgAAAAgAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAAH/gAAA/wQAIAAEACAABAA4ABwACgAAAAQAAAAIAAAAAEA
        IAAAAAAAQAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVRUVBJWVlZQVVVVmFRUVNNVVVXuVFRU81RU
        WPNJTZH0RUyi3VNTY5lXV1dPR0eOGTZD9F42Q/R1AAAAAVdXVylUVFSgVFRU1VVVVbVUVFSBU1NTXFRU
        VFVUVFpVQUe0dTlF4dZGTJ3yUlNj3kVMob43Qu7GNUP0X0xMTApVVVWYVFRUxlNTU1JYWFgXVFRUElRU
        VBtRUVEcUVFRHFJSah87Q9paOEPpyD1Gy908RtH0RkultktLpRFPT08QVVVVxFVVVXRUVFRIVVVVg1RU
        VKlUVFS4VFRUuFRUVLhUVFS4UlNgrj9Hwc42Q+32P0jE6VJTZcZPT08QT09PEFRUVMlVVVXLVFRU1lRU
        VL5UVFSZVVVVfVVVVXdVVVV3UVNfhkdNmdY8RtHwQ0my8j1HyvpESqrNP0qqGE9PTxBUVFTKVFRUzVVV
        VVlVVVUeSEhIB1VVVQNVVVUDSEi2BzZF8FU2QvK/OEThaFJSal1JTY7OPEbT7DdC829PT08QVFRUxlVV
        VWZRUVEWU1NTMVVVVVZUVFRvVFRUclRUW3VHTJmrREuonE9PaTpUVFQVVFRbZ0tOheM4QuNnT09PEFVV
        VcdUVFSZVFRUqlRUVNJUVFTTVFRUwVRUVLtUVFS7VFRXw1RUVtZUVFTSVFRUqlZWVppUVFbISEhtFU9P
        TxBVVVXKVFRU51RUVKhUVFRdU1NTK1VVVR5XV1cdV1dXHVVVVR5RUVEsVFRUXVRUVKhUVFTnVFRUyU9P
        TxBPT08QVFRUx1RUVItSUlIfU1NTLldXV0xUVFRjVFRUalRUVGpUVFRjV1dXTFRUVC1SUlIfVFRUjVRU
        VMZPT08QT09PEFRUVMZUVFSFVFRUlFRUVLRUVFSxVFRUllVVVYlVVVWJVFRUllRUVLFUVFS0VFRUlFVV
        VYZUVFTFT09PEE9PTxBUVFTJVFRUzlRUVHVTU1MxS0tLEUxMTApfX18IX19fCExMTApLS0sRU1NTMVVV
        VXhUVFTQVVVVyE9PTxBPT08QVFRUxVRUVIpiYmINAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABbW1sOVVVVjFVVVcRPT08QVFRUCVRUVI5UVFTDVFRUTlBQUBNVVVUDf39/AgAAAAEAAAABf39/Aj8/
        PwRZWVkUVFRUUVRUVMZVVVWYTExMCgAAAAFVVVUeVFRUmlRUVNNVVVWzVVVVgFRUVFtWVlZTVlZWU1RU
        VFtUVFSBVFRUtVRUVNVUVFSgUFBQKQAAAAEAAAAAAAAAAVRUVBJUVFRRVFRUmlRUVNNUVFTuVFRU81RU
        VPNUVFTrVFRU0FRUVJlUVFRRVFRUEgAAAAEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAD/AAAAAAAAAAAAAAgAEAAA==
</value>
  </data>
</root>