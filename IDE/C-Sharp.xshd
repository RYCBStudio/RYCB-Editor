<?xml version="1.0"?>
<SyntaxDefinition name="CSharp" extensions=".cs" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008">
	<!-- The named colors 'Comment' and 'String' are used in SharpDevelop to detect if a line is inside a multiline string/comment -->
	<Color name="Comment" foreground="#ff808080" exampleText="#comment" />
	<Color name="String" foreground="#ffD69D85" />
	<Color name="Punctuation" />
	<Color name="MethodCall" foreground="#ffFFDBA3"/>
	<Color name="NumberLiteral" foreground="#ffB5CEA8"/>
	<Color name="NilKeyword" fontWeight="bold"/>
	<Color name="Keywords" fontWeight="bold" foreground="#ff569CD6" />
	<Color name="GotoKeywords" foreground="#ff569CD6" />
	<Color name="Visibility" fontWeight="bold" foreground="#fff99157"/>
	<Color name="TrueFalse" fontWeight="bold" foreground="#ff569CD6" />

	<!-- This is the main ruleset. -->
	<RuleSet>

		<Span color="Comment" begin="//" />

		<Span color="String">
			<Begin>"</Begin>
			<End>"</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>

		<Span color="String">
			<Begin>'</Begin>
			<End>'</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>

		<Span color="String" multiline="true" begin='["""].+' end='.+["""]'/>

		<Keywords color="TrueFalse">
			<Word>true</Word>
			<Word>false</Word>
		</Keywords>

		<Keywords color="Keywords">
			<Word>add</Word>
			<Word>and</Word>
			<Word>alias</Word>
			<Word>ascending</Word>
			<Word>args</Word>
			<Word>async</Word>
			<Word>await</Word>
			<Word>by</Word>
			<Word>descending</Word>
			<Word>dynamic</Word>
			<Word>equals</Word>
			<Word>from</Word>
			<Word>get</Word>
			<Word>global</Word>
			<Word>group</Word>
			<Word>init</Word>
			<Word>into</Word>
			<Word>join</Word>
			<Word>let</Word>
			<Word>nameof</Word>
			<Word>nint</Word>
			<Word>not</Word>
			<Word>notnull</Word>
			<Word>nuint</Word>
			<Word>on</Word>
			<Word>or</Word>
			<Word>orderby</Word>
			<Word>partial</Word>
			<Word>record</Word>
			<Word>remove</Word>
			<Word>select</Word>
			<Word>set</Word>
			<Word>unmanaged</Word>
			<Word>value</Word>
			<Word>var</Word>
			<Word>when</Word>
			<Word>where</Word>
			<Word>with</Word>
			<Word>yield</Word>
			<Word>abstract</Word>
			<Word>as</Word>
			<Word>base</Word>
			<Word>bool</Word>
			<Word>break</Word>
			<Word>byte</Word>
			<Word>case</Word>
			<Word>catch</Word>
			<Word>char</Word>
			<Word>checked</Word>
			<Word>class</Word>
			<Word>const</Word>
			<Word>continue</Word>
			<Word>decimal</Word>
			<Word>default</Word>
			<Word>delegate</Word>
			<Word>do</Word>
			<Word>double</Word>
			<Word>else</Word>
			<Word>enum</Word>
			<Word>event</Word>
			<Word>explicit</Word>
			<Word>extern</Word>
			<Word>false</Word>
			<Word>finally</Word>
			<Word>fixed</Word>
			<Word>float</Word>
			<Word>for</Word>
			<Word>foreach</Word>
			<Word>goto</Word>
			<Word>if</Word>
			<Word>implicit</Word>
			<Word>in</Word>
			<Word>int</Word>
			<Word>interface</Word>
			<Word>internal</Word>
			<Word>is</Word>
			<Word>lock</Word>
			<Word>long</Word>
			<Word>namespace</Word>
			<Word>new</Word>
			<Word>null</Word>
			<Word>object</Word>
			<Word>operator</Word>
			<Word>out</Word>
			<Word>override</Word>
			<Word>params</Word>
			<Word>private</Word>
			<Word>protected</Word>
			<Word>public</Word>
			<Word>readonly</Word>
			<Word>ref</Word>
			<Word>return</Word>
			<Word>sbyte</Word>
			<Word>sealed</Word>
			<Word>short</Word>
			<Word>sizeof</Word>
			<Word>stackalloc</Word>
			<Word>static</Word>
			<Word>string</Word>
			<Word>struct</Word>
			<Word>switch</Word>
			<Word>this</Word>
			<Word>throw</Word>
			<Word>true</Word>
			<Word>try</Word>
			<Word>typeof</Word>
			<Word>uint</Word>
			<Word>ulong</Word>
			<Word>unchecked</Word>
			<Word>unsafe</Word>
			<Word>ushort</Word>
			<Word>using</Word>
			<Word>virtual</Word>
			<Word>void</Word>
			<Word>volatile</Word>
			<Word>while</Word>
		</Keywords>

		<!-- Mark previous rule-->
		<Rule color="MethodCall">
			\b
			[\d\w_]+  # an identifier
			(?=\s*\() # followed by (
		</Rule>
		<Rule color="MethodCall">
			\b
			[\d\w_]+  # an identifier
			(?=\s*\") # followed by "
		</Rule>
		<Rule color="MethodCall">
			\b
			[\d\w_]+  # an identifier
			(?=\s*\') # followed by '
		</Rule>
		<Rule color="MethodCall">
			\b
			[\d\w_]+  # an identifier
			(?=\s*\{) # followed by {
		</Rule>
		<Rule color="MethodCall">
			\b
			[\d\w_]+  # an identifier
			(?=\s*\[) # followed by [
		</Rule>

		<!-- Digits -->
		<Rule color="NumberLiteral">
			\b0[xX][0-9a-fA-F]+  # hex number
			|
			( \b\d+(\.[0-9]+)?   #number with optional floating point
			| \.[0-9]+           #or just starting with floating point
			)
			([eE][+-]?[0-9]+)? # optional exponent
		</Rule>

		<Rule color="Punctuation">
			[?,.;()\[\]{}+\-/%*&lt;&gt;^+~!|&amp;]+
		</Rule>
	</RuleSet>
</SyntaxDefinition>
