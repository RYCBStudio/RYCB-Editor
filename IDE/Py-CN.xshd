<?xml version="1.0"?>
<SyntaxDefinition name="RYCB Py-CN Project" extensions=".pycn" xmlns="http://icsharpcode.net/sharpdevelop/syntaxdefinition/2008">
	<!-- The named colors 'Comment' and 'String' are used in SharpDevelop to detect if a line is inside a multiline string/comment -->
	<Color name="Comment" foreground="#ff808080" exampleText="#comment" />
	<Color name="String" foreground="#ff6A8759" />
	<Color name="Punctuation" />
	<Color name="MethodCall" foreground="#ffFFC66D"/>
	<Color name="NumberLiteral" foreground="#ff6897BB"/>
	<Color name="NilKeyword" fontWeight="bold"/>
	<Color name="Keywords" fontWeight="bold" foreground="#ffCC7832" />
	<Color name="GotoKeywords" foreground="#ffCC7832" />
	<Color name="Visibility" fontWeight="bold" foreground="#fff99157"/>
	<Color name="TrueFalse" fontWeight="bold" foreground="#ffCC7832" />
	<Color name="SpecDef" foreground="#ffA8C023"/>


	<RuleSet name="CommentMarkerSet">
		<Keywords color="SpecDef">
			<Word>__dir__</Word>
			<Word>__getattr__</Word>
			<Word>__abs__</Word>
			<Word>__del__</Word>
			<Word>__hex__</Word>
			<Word>__int__</Word>
			<Word>__len__</Word>
			<Word>__add__</Word>
			<Word>__aenter__</Word>
			<Word>__aexit__</Word>
			<Word>__aiter__</Word>
			<Word>__await__</Word>
			<Word>__bool__</Word>
			<Word>__bytes__</Word>
			<Word>__call__</Word>
			<Word>__ceil__</Word>
			<Word>__class_getitem__</Word>
			<Word>__cmp__</Word>
			<Word>__coerce__</Word>
			<Word>__complex__</Word>
			<Word>__contains__</Word>
			<Word>__copy__</Word>
			<Word>__deepcopy__</Word>
		</Keywords>
		<Keywords fontWeight="bold" foreground="#ffB200B2">
			<Word>TODO</Word>
			<Word>FIXME</Word>
		</Keywords>
	</RuleSet>


	<!-- This is the main ruleset. -->
	<RuleSet>

		<Span color="Comment" begin="#" />
		<Span color="String" multiline="true" begin="'''" end="'''" />
		<Span color="String" multiline="true" begin='"""' end='"""' />
		<Span color="String" multiline="true" begin="”“”" end="”“”" />
		<Span color="String" multiline="true" begin="“”“" end='“”“' />
		<Span color="String" multiline="true" begin="“”“" end="”“”" />
		<Span color="String" multiline="true" begin="“”“" end='”“”' />

		<Span color="String">
			<Begin>"</Begin>
			<End>"</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>

		<Span color="String">
			<Begin>“</Begin>
			<End>”</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>

		<Span color="String">
			<Begin>”</Begin>
			<End>”</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>

		<Span color="String">
			<Begin>”</Begin>
			<End>“</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>


		<Span color="String">
			<Begin>'</Begin>
			<End>'</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>

		<Span color="String">
			<Begin>‘</Begin>
			<End>’</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>

		<Span color="String">
			<Begin>’</Begin>
			<End>’</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>

		<Span color="String">
			<Begin>’</Begin>
			<End>‘</End>
			<RuleSet>
				<!-- span for escape sequences -->
				<Span begin="\\" end="."/>
			</RuleSet>
		</Span>

		<Span color="String" multiline="true">
			<Begin color="String">[“”“].+</Begin>
			<End>.+[”“”]</End>
		</Span>

		<Keywords color="TrueFalse">
			<Word>True</Word>
			<Word>False</Word>
			<!-- Chinese Ver -->
			<Word>真</Word>
			<Word>假</Word>
		</Keywords>

		<Keywords color="Keywords">
			<Word>False</Word>
			<Word>None</Word>
			<Word>True</Word>
			<Word>and</Word>
			<Word>as</Word>
			<Word>assert</Word>
			<Word>async</Word>
			<Word>await</Word>
			<Word>break</Word>
			<Word>class</Word>
			<Word>continue</Word>
			<Word>def</Word>
			<Word>del</Word>
			<Word>elif</Word>
			<Word>else</Word>
			<Word>except</Word>
			<Word>finally</Word>
			<Word>for</Word>
			<Word>from</Word>
			<Word>global</Word>
			<Word>if</Word>
			<Word>import</Word>
			<Word>in</Word>
			<Word>is</Word>
			<Word>lambda</Word>
			<Word>nonlocal</Word>
			<Word>not</Word>
			<Word>or</Word>
			<Word>pass</Word>
			<Word>raise</Word>
			<Word>return</Word>
			<Word>try</Word>
			<Word>while</Word>
			<Word>with</Word>
			<Word>yield</Word>
			<!-- Chinese Ver -->
			<Word>假</Word>
			<!-- False -->
			<Word>空</Word>
			<!-- None -->
			<Word>无</Word>
			<!-- None -->
			<Word>真</Word>
			<!-- True -->
			<Word>和</Word>
			<!-- and -->
			<Word>与</Word>
			<!-- and -->
			<Word>作为</Word>
			<!-- as -->
			<Word>当作</Word>
			<!-- as -->
			<Word>断言</Word>
			<!-- assert -->
			<Word>异步</Word>
			<!-- async -->
			<Word>异步操作</Word>
			<!-- async -->
			<Word>等候</Word>
			<!-- await -->
			<Word>等待</Word>
			<!-- await -->
			<Word>跳出循环</Word>
			<!-- break -->
			<Word>打断循环</Word>
			<!-- break -->
			<Word>跳出</Word>
			<!-- break -->
			<Word>定义类</Word>
			<!-- class -->
			<Word>类</Word>
			<!-- class -->
			<Word>跳过并继续</Word>
			<!-- continue -->
			<Word>继续</Word>
			<!-- continue -->
			<Word>定义</Word>
			<!-- def -->
			<Word>定义方法</Word>
			<!-- def -->
			<Word>定义函数</Word>
			<!-- def -->
			<Word>函数</Word>
			<!-- def -->
			<Word>删除</Word>
			<!-- del -->
			<Word>解除引用</Word>
			<!-- del -->
			<Word>解除变量引用</Word>
			<!-- del -->
			<Word>删除变量</Word>
			<!-- del -->
			<Word>否则如果</Word>
			<!-- elif -->
			<Word>否则</Word>
			<!-- else -->
			<Word>捕获</Word>
			<!-- except -->
			<Word>捕获异常</Word>
			<!-- except -->
			<Word>若捕获异常</Word>
			<!-- except -->
			<Word>异常最终处理</Word>
			<!-- finally -->
			<Word>遍历</Word>
			<!-- for -->
			<Word>从</Word>
			<!-- from -->
			<Word>全局变量</Word>
			<!-- global -->
			<Word>如果</Word>
			<!-- if -->
			<Word>导入</Word>
			<!-- import -->
			<Word>在</Word>
			<!-- in -->
			<Word>是</Word>
			<!-- is -->
			<Word>匿名函数</Word>
			<!-- lambda -->
			<Word>-></Word>
			<!-- lambda -->
			<Word>非本地变量</Word>
			<!-- nonlocal -->
			<Word>非本地化变量</Word>
			<!-- nonlocal -->
			<Word>使变量全局</Word>
			<!-- nonlocal -->
			<Word>使变量全局化</Word>
			<!-- nonlocal -->
			<Word>不是</Word>
			<!-- not -->
			<Word>不</Word>
			<!-- not -->
			<Word>或</Word>
			<!-- or -->
			<Word>或者</Word>
			<!-- or -->
			<Word>抑或</Word>
			<!-- or -->
			<Word>占位语句</Word>
			<!-- pass -->
			<Word>占位符</Word>
			<!-- pass -->
			<Word>语句占位符</Word>
			<!-- pass -->
			<Word>通过</Word>
			<!-- pass -->
			<Word>抛出异常</Word>
			<!-- raise -->
			<Word>抛出</Word>
			<!-- raise -->
			<Word>返回</Word>
			<!-- return -->
			<Word>尝试运行</Word>
			<!-- try -->
			<Word>尝试</Word>
			<!-- try -->
			<Word>当</Word>
			<!-- while -->
			<Word>抽象资源处理逻辑</Word>
			<!-- with -->
			<Word>抽象处理逻辑</Word>
			<!-- with -->
			<Word>抽象逻辑</Word>
			<!-- with -->
			<Word>抽象</Word>
			<!-- with -->
			<Word>快速</Word>
			<!-- with -->
			<Word>yield</Word>
			<!-- yield -->
		</Keywords>

		<!-- Mark previous rule-->
		<Rule color="MethodCall">
			\b
			[\d\w_]+  # an identifier
			(?=\s*\() # followed by (
		</Rule>
		<Rule color="MethodCall">
			\b
			[\d\w_]+  # an identifier
			(?=\s*\（) # followed by （
		</Rule>
		<Rule color="MethodCall">
			\b
			[\d\w_]+  # an identifier
			(?=\s*\") # followed by "
		</Rule>
		<Rule color="MethodCall">
			\b
			[\d\w_]+  # an identifier
			(?=\s*\') # followed by '
		</Rule>
		<Rule color="MethodCall">
			\b
			[\d\w_]+  # an identifier
			(?=\s*\{) # followed by {
		</Rule>
		<Rule color="MethodCall">
			\b
			[\d\w_]+  # an identifier
			(?=\s*\[) # followed by [
		</Rule>

		<!-- Digits -->
		<Rule color="NumberLiteral">
			\b0[xX][0-9a-fA-F]+  # hex number
			|
			( \b\d+(\.[0-9]+)?   #number with optional floating point
			| \.[0-9]+           #or just starting with floating point
			)
			([eE][+-]?[0-9]+)? # optional exponent
		</Rule>

		<Rule color="Punctuation">
			[?,.;()\[\]{}+\-/%*&lt;&gt;^+~!|&amp;？，。；（）【】{}+\-/%《》！@#￥%……*]+
		</Rule>
	</RuleSet>
</SyntaxDefinition>
